#include "BMI088.h"
#include <Wire.h>
#include "RTClib.h"
#include <SPI.h>
#include <SD.h>
#include <Adafruit_Sensor.h>
#include <Adafruit_BME280.h>
#include <Adafruit_GPS.h>
#include <Arduino.h>
#include <LoRa.h>

#define SEALEVELPRESSURE_HPA (1006.2)
#define GPSSerial Serial1
#define GPSECHO false

Adafruit_GPS GPS(&GPSSerial);
Adafruit_BME280 bme;
RTC_PCF8523 rtc;
File SDFile;

uint32_t timer = millis();

const int csPin = 17;        
const int resetPin = 21;    
const int irqPin = 20;       
const int _MISO = 8;
const int _MOSI = 11;
const int _CS = 9;
const int _SCK = 10;

char daysOfTheWeek[7][12] = {"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"};
float lastMillis, currentMillis, gz, gx, gy, gzS, gxS, gyS;
String dateStamp, Packet, IMU, BME, GPSVal, outgoing, receivedData, myGPS;
int status;

Bmi088Accel accel(Wire, 0x19);
Bmi088Gyro gyro(Wire, 0x69);

void setup() {
  // Initialize GPS
  GPS.begin(9600);
  GPS.sendCommand(PMTK_SET_NMEA_OUTPUT_RMCGGA);
  GPS.sendCommand(PMTK_SET_NMEA_UPDATE_1HZ);
  GPS.sendCommand(PGCMD_ANTENNA);
  GPSSerial.println(PMTK_Q_RELEASE);

  // Start reading GPS immediately
  char c = GPS.read();
  if (GPSECHO && c) Serial.print(c);

  if (GPS.newNMEAreceived()) {
    if (GPS.parse(GPS.lastNMEA())) {
      if (GPS.fix) {
        GPSVal = String((bool)GPS.fix) + "," + String((int)GPS.fixquality) + "," + 
                 ddmmToDD(String(GPS.latitude, 4), GPS.lat) + "," + 
                 ddmmToDD(String(GPS.longitude, 4), GPS.lon) + "," + 
                 String(GPS.speed) + "," + String(GPS.altitude) + "," + 
                 String((int)GPS.satellites);
        char buffer[GPSVal.length() + 1];
        GPSVal.toCharArray(buffer, sizeof(buffer));
        for (int i = 0; i < GPSVal.length(); i++) {
          rp2040.fifo.push(buffer[i]); // Send to Core 1 immediately
        }
      }
    }
  }
}

void loop() {
  char c = GPS.read();
  if (GPSECHO && c) Serial.print(c);

  if (GPS.newNMEAreceived()) {
    if (!GPS.parse(GPS.lastNMEA())) return;
  }

  if (millis() - timer > 2000) {
    timer = millis();
    if (GPS.fix) {
      GPSVal = String((bool)GPS.fix) + "," + String((int)GPS.fixquality) + "," + 
               ddmmToDD(String(GPS.latitude, 4), GPS.lat) + "," + 
               ddmmToDD(String(GPS.longitude, 4), GPS.lon) + "," + 
               String(GPS.speed) + "," + String(GPS.altitude) + "," + 
               String((int)GPS.satellites);
      char buffer[GPSVal.length() + 1];
      GPSVal.toCharArray(buffer, sizeof(buffer));
      for (int i = 0; i < GPSVal.length(); i++) {
        rp2040.fifo.push(buffer[i]);
      }
    }
  }
}

void setup1() {
  // Initialize Serial but don't wait for connection
  Serial.begin(115200); // Still available for debugging if connected, but not required

  pinMode(12, OUTPUT); // Green
  pinMode(13, OUTPUT); // Red
  pinMode(14, OUTPUT); // Blue

  SPI.setRX(16);
  SPI.setTX(19);
  SPI.setSCK(18);
  LoRa.setSPI(SPI);
  LoRa.enableCrc();
  LoRa.setPins(csPin, resetPin, irqPin);

  if (!LoRa.begin(915E6)) {
    digitalWrite(12, HIGH); // Indicate LoRa failure
    while (1);
  }

  SPI1.setRX(_MISO);
  SPI1.setTX(_MOSI);
  SPI1.setSCK(_SCK);
  
  if (!bme.begin(0x76, &Wire)) {
    digitalWrite(13, HIGH); // Indicate BME failure
    while (1);
  }

  if (!SD.begin(_CS, SPI1)) {
    digitalWrite(14, HIGH); // Indicate SD failure
    while (1);
  }
  SDFile = SD.open("data.txt", FILE_WRITE);
  if (!SDFile) {
    digitalWrite(14, HIGH); // Indicate SD file failure
    while (1);
  }

  status = accel.begin();
  if (status < 0) {
    digitalWrite(13, HIGH); // Indicate IMU failure
    while (1);
  }
  status = gyro.begin();
  if (status < 0) {
    digitalWrite(13, HIGH); // Indicate IMU failure
    while (1);
  }

  if (!rtc.begin() || !rtc.initialized() || rtc.lostPower()) {
    rtc.adjust(DateTime(F(__DATE__), F(__TIME__)));
  }
  rtc.start();

  // Send initial data immediately after setup
  sendInitialData();
}

void loop1() {
  DateTime now = rtc.now();

  currentMillis = millis();
  accel.readSensor();
  gyro.readSensor();
  
  gxS = (1.0 - 0.01) * gxS + 0.01 * gyro.getGyroX_rads();
  gyS = (1.0 - 0.01) * gyS + 0.01 * gyro.getGyroY_rads();
  gzS = (1.0 - 0.01) * gzS + 0.01 * gyro.getGyroZ_rads();

  gx += (gxS < 0.0006 && gxS > -0.0006 ? 0.00f : gxS) * 2;
  gy += (gyS < 0.0006 && gyS > -0.0006 ? 0.00f : gyS) * 2;
  gz += (gzS < 0.0006 && gzS > -0.0006 ? 0.00f : gzS) * 2;
  
  dateStamp = "[" + String(now.year(), DEC) + "/" + String(now.month(), DEC) + "/" + 
              String(now.day(), DEC) + " " + String(now.hour(), DEC) + ":" + 
              String(now.minute(), DEC) + ":" + String(now.second(), DEC) + "]";
  IMU = String(accel.getAccelX_mss()) + "," + String(accel.getAccelY_mss()) + "," + 
        String(accel.getAccelZ_mss()) + "," + String(round(gx)) + "," + 
        String(round(gy)) + "," + String(round(gz)) + "," + String(accel.getTemperature_C());
  BME = String(bme.readTemperature()) + "," + String(bme.readPressure() / 100.0F) + "," + 
        String(bme.readAltitude(SEALEVELPRESSURE_HPA)) + "," + String(bme.readHumidity());

  lastMillis = currentMillis;
  
  receivedData = "";
  while (rp2040.fifo.available()) {
    receivedData += (char)rp2040.fifo.pop();
  }
  if (receivedData != "" && receivedData != myGPS) {
    myGPS = receivedData;
  }

  Packet = dateStamp + " " + IMU + "," + BME + "," + myGPS;
  if (Packet.length() > 255) {
    Packet = Packet.substring(0, 255);
  }

  sendMessage(Packet);
  SDFile.println(Packet);
  SDFile.flush();

  onReceive(LoRa.parsePacket());
  delay(2000); // Match GPS update rate
}

void sendInitialData() {
  DateTime now = rtc.now();
  accel.readSensor();
  gyro.readSensor();

  gxS = gyro.getGyroX_rads();
  gyS = gyro.getGyroY_rads();
  gzS = gyro.getGyroZ_rads();
  gx = gxS * 2;
  gy = gyS * 2;
  gz = gzS * 2;

  dateStamp = "[" + String(now.year(), DEC) + "/" + String(now.month(), DEC) + "/" + 
              String(now.day(), DEC) + " " + String(now.hour(), DEC) + ":" + 
              String(now.minute(), DEC) + ":" + String(now.second(), DEC) + "]";
  IMU = String(accel.getAccelX_mss()) + "," + String(accel.getAccelY_mss()) + "," + 
        String(accel.getAccelZ_mss()) + "," + String(round(gx)) + "," + 
        String(round(gy)) + "," + String(round(gz)) + "," + String(accel.getTemperature_C());
  BME = String(bme.readTemperature()) + "," + String(bme.readPressure() / 100.0F) + "," + 
        String(bme.readAltitude(SEALEVELPRESSURE_HPA)) + "," + String(bme.readHumidity());

  receivedData = "";
  while (rp2040.fifo.available()) {
    receivedData += (char)rp2040.fifo.pop();
  }
  if (receivedData != "") {
    myGPS = receivedData;
  } else {
    myGPS = "No GPS data yet";
  }

  Packet = dateStamp + " " + IMU + "," + BME + "," + myGPS;
  if (Packet.length() > 255) {
    Packet = Packet.substring(0, 255);
  }

  sendMessage(Packet);
  SDFile.println(Packet);
  SDFile.flush();
}

void sendMessage(String outgoing) {
  LoRa.beginPacket();
  LoRa.write(outgoing.length());
  LoRa.print(outgoing);
  if (!LoRa.endPacket()) {
    // Optionally indicate failure via LED if desired
  }
}

void onReceive(int packetSize) {
  if (packetSize == 0) return;

  byte incomingLength = LoRa.read();
  String incoming = "";
  while (LoRa.available()) {
    incoming += (char)LoRa.read();
  }

  // No serial output here, but you could add LED feedback if needed
}

String ddmmToDD(String raw_gps, char lat) {
  float val = raw_gps.toFloat();
  float deg = int(val / 100);
  float min = (val - deg * 100) / 60;
  float result = deg + min;
  return (lat == 'N' || lat == 'E') ? String(result, 6) : String(-result, 6);
}
